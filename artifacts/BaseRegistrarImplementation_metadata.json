{
	"compiler": {
		"version": "0.5.0+commit.1d4f565a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "id",
						"type": "uint256"
					},
					{
						"name": "owner",
						"type": "address"
					},
					{
						"name": "duration",
						"type": "uint256"
					}
				],
				"name": "registerOnly",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "id",
						"type": "uint256"
					},
					{
						"name": "owner",
						"type": "address"
					}
				],
				"name": "reclaim",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ens",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "resolver",
						"type": "address"
					}
				],
				"name": "setResolver",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "available",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "controller",
						"type": "address"
					}
				],
				"name": "addController",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "GRACE_PERIOD",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "id",
						"type": "uint256"
					},
					{
						"name": "duration",
						"type": "uint256"
					}
				],
				"name": "renew",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "nameExpires",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "controllers",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "baseNode",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					},
					{
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "controller",
						"type": "address"
					}
				],
				"name": "removeController",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "id",
						"type": "uint256"
					},
					{
						"name": "owner",
						"type": "address"
					},
					{
						"name": "duration",
						"type": "uint256"
					}
				],
				"name": "register",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_ens",
						"type": "address"
					},
					{
						"name": "_baseNode",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "controller",
						"type": "address"
					}
				],
				"name": "ControllerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "controller",
						"type": "address"
					}
				],
				"name": "ControllerRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "expires",
						"type": "uint256"
					}
				],
				"name": "NameMigrated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "expires",
						"type": "uint256"
					}
				],
				"name": "NameRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "expires",
						"type": "uint256"
					}
				],
				"name": "NameRenewed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"approve(address,uint256)": {
					"details": "Approves another address to transfer the given token ID\r The zero address indicates there is no approved address.\r There can only be one approved address per token at a given time.\r Can only be called by the token owner or an approved operator.\r",
					"params": {
						"to": "address to be approved for the given token ID\r",
						"tokenId": "uint256 ID of the token to be approved\r"
					}
				},
				"balanceOf(address)": {
					"details": "Gets the balance of the specified address\r",
					"params": {
						"owner": "address to query the balance of\r"
					},
					"return": "uint256 representing the amount owned by the passed address\r"
				},
				"getApproved(uint256)": {
					"details": "Gets the approved address for a token ID, or zero if no address set\r Reverts if the token ID does not exist.\r",
					"params": {
						"tokenId": "uint256 ID of the token to query the approval of\r"
					},
					"return": "address currently approved for the given token ID\r"
				},
				"isApprovedForAll(address,address)": {
					"details": "Tells whether an operator is approved by a given owner\r",
					"params": {
						"operator": "operator address which you want to query the approval of\r",
						"owner": "owner address which you want to query the approval of\r"
					},
					"return": "bool whether the given operator is approved by the given owner\r"
				},
				"isOwner()": {
					"return": "true if `msg.sender` is the owner of the contract.\r"
				},
				"owner()": {
					"return": "the address of the owner.\r"
				},
				"ownerOf(uint256)": {
					"details": "Gets the owner of the specified token ID. Names become unowned\r     when their registration expires.\r",
					"params": {
						"tokenId": "uint256 ID of the token to query the owner of\r"
					},
					"return": "address currently marked as the owner of the given token ID\r"
				},
				"reclaim(uint256,address)": {
					"details": "Reclaim ownership of a name in ENS, if you own it in the registrar.\r"
				},
				"register(uint256,address,uint256)": {
					"details": "Register a name.\r",
					"params": {
						"duration": "Duration in seconds for the registration.\r",
						"id": "The token ID (keccak256 of the label).\r",
						"owner": "The address that should own the registration.\r"
					}
				},
				"registerOnly(uint256,address,uint256)": {
					"details": "Register a name, without modifying the registry.\r",
					"params": {
						"duration": "Duration in seconds for the registration.\r",
						"id": "The token ID (keccak256 of the label).\r",
						"owner": "The address that should own the registration.\r"
					}
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract.\r"
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Safely transfers the ownership of a given token ID to another address\r If the target address is a contract, it must implement `onERC721Received`,\r which is called upon a safe transfer, and return the magic value\r `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r the transfer is reverted.\r      * Requires the msg sender to be the owner, approved, or operator\r",
					"params": {
						"from": "current owner of the token\r",
						"to": "address to receive the ownership of the given token ID\r",
						"tokenId": "uint256 ID of the token to be transferred\r"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Safely transfers the ownership of a given token ID to another address\r If the target address is a contract, it must implement `onERC721Received`,\r which is called upon a safe transfer, and return the magic value\r `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r the transfer is reverted.\r Requires the msg sender to be the owner, approved, or operator\r",
					"params": {
						"_data": "bytes data to send along with a safe transfer check\r",
						"from": "current owner of the token\r",
						"to": "address to receive the ownership of the given token ID\r",
						"tokenId": "uint256 ID of the token to be transferred\r"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Sets or unsets the approval of a given operator\r An operator is allowed to transfer all tokens of the sender on their behalf\r",
					"params": {
						"approved": "representing the status of the approval to be set\r",
						"to": "operator address to set the approval\r"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers the ownership of a given token ID to another address\r Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r Requires the msg sender to be the owner, approved, or operator\r",
					"params": {
						"from": "current owner of the token\r",
						"to": "address to receive the ownership of the given token ID\r",
						"tokenId": "uint256 ID of the token to be transferred\r"
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.\r",
					"params": {
						"newOwner": "The address to transfer ownership to.\r"
					}
				}
			}
		},
		"userdoc": {
			"methods": {
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner.\r It will not be possible to call the functions with the `onlyOwner`\r modifier anymore.\r"
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"src\\BaseRegistrarImplementation.sol": "BaseRegistrarImplementation"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"src\\BaseRegistrarImplementation.sol": {
			"keccak256": "0x77057f4837516937dd3ba77af4f5e082a5f85aee3e7131a2296d9841763ccf51",
			"urls": [
				"bzzr://4533105aa46c91d262e4a091e3797f0e3fcf65e2f2cb43e6fe9b60ec1be437a5"
			]
		}
	},
	"version": 1
}